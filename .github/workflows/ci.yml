name: CI
on:
  push:
    branches:
      - master
      - release-*
  pull_request:
  pull_request_target:
  workflow_dispatch:
env:
  DOTNET_NOLOGO: true
jobs:
  build:
    if:
      (github.event_name == 'pull_request_target' && github.event.pull_request.user.login == 'dependabot[bot]') ||
      (github.event_name == 'pull_request' && github.event.pull_request.user.login != 'dependabot[bot]') ||
      github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2019
            name: Windows
          - os: ubuntu-20.04
            name: Linux
      fail-fast: false
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - name: Checkout for Dependabot
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2.3.4
        with:
          ref: "refs/pull/${{ github.event.number }}/merge"
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: 5.0.x
      - name: Setup .NET Core 3.1 runtime
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: 3.1.x
      - name: Build
        run: dotnet build src --configuration Release
      - name: Upload packages
        if: matrix.name == 'Windows'
        uses: actions/upload-artifact@v2.2.4
        with:
          name: NuGet packages
          path: nugets/
          retention-days: 7
      - name: Azure login
        uses: azure/login@v1.3.0
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
      - name: Setup infrastructure
        id: setup-infrastructure
        shell: pwsh
        run: |
          # Retrieve the Azure region in which this workflow is running. This region should be used to create addtional resources.
          $hostInfo = curl -H Metadata:true "169.254.169.254/metadata/instance?api-version=2017-08-01" | ConvertFrom-Json
          $region = $hostInfo.compute.location
          $gaResourceGroup = "GitHubActions-RG"
          $rand = Get-Random
          $cosmosname = "psw-cosmosdb-$($rand)"
          $storagename = "pswtables$($rand)"

          echo "::set-output name=cosmosname::$cosmosname"
          echo "::set-output name=storagename::$storagename"

          $dateTag = "Created=$(Get-Date -Format "yyyy-MM-dd")"

          echo "Creating CosmosDB database account $cosmosname (This can take awhile.)"

          $acctDetails = az cosmosdb create --name $cosmosname --location regionName=$region failoverPriority=0 isZoneRedundant=False --resource-group $gaResourceGroup --capabilities EnableServerless --tags Package=AspExport RunnerOS=${{ runner.os }} $dateTag | ConvertFrom-Json

          if(!$acctDetails || !$acctDetails.documentEndpoint)
          {
            echo "Account creation failed. $acctDetails"
            exit 1;
          }

          $documentEndpoint = $acctDetails.documentEndpoint

          echo "::add-mask::$documentEndpoint"
          echo "Getting CosmosDB access keys"

          $keyDetails = az cosmosdb keys list --name $cosmosname --resource-group $gaResourceGroup | ConvertFrom-Json

          if(!$keyDetails || !$keyDetails.primaryMasterKey)
          {
            echo "Unable to retrieve access keys.  $keyDetails"
            exit 1;
          }

          $cosmosKey = $keyDetails.primaryMasterKey

          echo "::add-mask::$cosmosKey"
          echo "Creating CosmosDB SQL Database "

          $dbDetails = az cosmosdb sql database create --name CosmosDBPersistence --account-name $cosmosname --resource-group $gaResourceGroup | ConvertFrom-Json

          echo "Creating storage account (This can take a while.)"

          $storageDetails = az storage account create --name $storagename --location $region --resource-group $gaResourceGroup --sku Standard_LRS | ConvertFrom-Json

          echo "Getting storage account keys"

          $storageKeyDetails = az storage account keys list --account-name $storagename --resource-group $gaResourceGroup | ConvertFrom-Json

          $storageKey = $storageKeyDetails[0].value

          echo "::add-mask::$storageKey"

          $storageConnectString = "DefaultEndpointsProtocol=https;AccountName=$storagename;AccountKey=$storageKey"

          echo "Tagging storage account"

          $ignore = az tag create --resource-id $storageDetails.id --tags Package=AspExport RunnerOS=${{ runner.os }} $dateTag

          echo "CosmosDBPersistence_ConnectionString=AccountEndpoint=$($documentEndpoint);AccountKey=$($cosmosKey);" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "AzureStoragePersistence_ConnectionString=$storageConnectString" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

          # Extra details for teardown
          echo "::add-mask::$($acctDetails.id)"
          echo "::set-output name=cosmosAccountId::$($acctDetails.id)"
      - name: Run tests
        uses: Particular/run-tests-action@v1.0.0
      - name: Teardown infrastructure
        if: ${{ always() }}
        shell: pwsh
        run: |
          $gaResourceGroup = "GitHubActions-RG"
          $ignore = az storage account delete --resource-group $gaResourceGroup --name ${{ steps.setup-infrastructure.outputs.storagename }} --yes

          # Use this once cosmosdb delete offers --no-wait argument, until then, it takes too long (~7m) and we use curl instead
          #$ignore = az cosmosdb delete --resource-group $gaResourceGroup --name ${{ steps.setup-infrastructure.outputs.cosmosname }} --yes

          # curl-based method
          $credentials = '${{ secrets.AZURE_ACI_CREDENTIALS }}' | ConvertFrom-Json
          $token = curl -X POST -d "grant_type=client_credentials&client_id=$($credentials.clientId)&client_secret=$($credentials.clientSecret)&resource=https%3A%2F%2Fmanagement.azure.com%2F" https://login.microsoftonline.com/$($credentials.tenantId)/oauth2/token | ConvertFrom-Json
          $authHeader = "Authorization: Bearer $($token.access_token)"
          $resourceUrl = "https://management.azure.com${{ steps.setup-infrastructure.outputs.cosmosAccountId }}?api-version=2021-04-15"
          curl -X DELETE $resourceUrl -H $authHeader -H "Content-Type: application/json" --silent
